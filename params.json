{"name":"Rdf-ldp","tagline":"A suite of LDP software and middleware for RDF.rb & Rack","body":"RDF::LDP\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/ruby-rdf/rdf-ldp.svg?branch=develop)](https://travis-ci.org/ruby-rdf/rdf-ldp)\r\n\r\nServer-side support for Linked Data Platform (LDP) with RDF.rb. To get started\r\nwith LDP, see the [LDP Primer](https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-primer/ldp-primer.html).\r\n\r\nThis software ships with the following libraries:\r\n\r\n  - `RDF::LDP` --- contains the domain model and behavior for LDP Resources and\r\n  interaction models.\r\n  - `Rack::LDP` --- a suite of Rack middleware for creating LDP servers based on\r\n  `RDF::LDP`.\r\n  - Lamprey --- a basic LDP server implemented with `Rack::LDP`.\r\n\r\nLamprey\r\n=======\r\n\r\nLamprey is a basic LDP server. To start it, use:\r\n\r\n```sh\r\n$ gem install rdf-ldp\r\n$ lamprey\r\n```\r\n\r\nLamprey currently uses an in-memory repository, and is therefore not a\r\npersistent datastore out of the box. Backends are swappable, using any\r\n`RDF::Repository` implementation with named graph (`#context`) support. We are\r\nworking to complete a recommended, default backend and introduce startup\r\nconfiguration. See [/CONSTRAINED_BY.md](/CONSTRAINED_BY.md) and\r\n[/IMPLEMENTATION.md](/IMPLEMENTATION.md) for details.\r\n\r\nAn `ldp:BasicContainer` will be created at the address of your first `GET`\r\nrequest if the backend store is empty. _Note that if that request is made to the\r\nserver root, Sinatra will assume a trailing slash_. You can also create an\r\ninitial container (or other resource) with HTTP `PUT`.\r\n\r\n```bash\r\n$ curl -i http://localhost:4567\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: text/turtle\r\nLink: <http://www.w3.org/ns/ldp#Resource>;rel=\"type\",<http://www.w3.org/ns/ldp#RDFSource>;rel=\"type\",<http://www.w3.org/ns/ldp#BasicContainer>;rel=\"type\"\r\nAllow: GET, POST, PUT, DELETE, OPTIONS, HEAD\r\nAccept-Post: application/n-triples, text/plain, application/n-quads, text/x-nquads, application/ld+json, application/x-ld+json, application/rdf+json, text/html, text/n3, text/rdf+n3, application/rdf+n3, application/rdf+xml, text/csv, text/tab-separated-values, application/csvm+json, text/turtle, text/rdf+turtle, application/turtle, application/x-turtle, application/trig, application/x-trig, application/trix\r\nEtag: \"1B2M2Y8AsgTpgAmY7PhCfg==0\"\r\nVary: Accept\r\nX-Content-Type-Options: nosniff\r\nServer: WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)\r\nDate: Mon, 27 Jul 2015 23:19:06 GMT\r\nContent-Length: 0\r\nConnection: Keep-Alive\r\n```\r\n\r\nSee \r\n\r\nRack::LDP\r\n==========\r\n\r\nSetting up a Custom Server\r\n--------------------------\r\n\r\nYou can quickly create your own server with any framework supporting\r\n[Rack](https://github.com/rack/). The simplest way to do this is with\r\n[Rackup](https://github.com/rack/rack/wiki/(tutorial)-rackup-howto).\r\n\r\n```ruby\r\n# ./config.ru\r\n\r\nrequire 'rack/ldp'\r\n\r\nuse Rack::LDP::ContentNegotiation\r\nuse Rack::LDP::Errors\r\nuse Rack::LDP::Responses\r\nuse Rack::LDP::Requests\r\n\r\n# Setup a repository and an initial container:\r\n#\r\n#   - You probably want some persistent repository implementation. The example\r\n#     uses an in-memory repository.\r\n#   - You may not need an initial \"base\" container, if you handle create on PUT\r\n#     requests.\r\n#\r\nrepository = RDF::Repository.new \r\nRDF::LDP::Container.new(RDF::URI('http://localhost:9292/'), repository)\r\n  .create('', 'text/plain') if repository.empty?\r\n\r\napp = proc do |env|\r\n  # Return a Rack response, giving an `RDF::LDP::Resource`-like object as the body.\r\n  # The `Rack::LDP` middleware marhsalls the request to the resource, builds the response,\r\n  # and handles conneg for RDF serializations (when the body is an `RDF::LDP::RDFSource`).\r\n  #\r\n  # @see http://www.rubydoc.info/github/rack/rack/master/file/SPEC#The_Response\r\n  \r\n  [200, {}, RDF::LDP::Resource.find(RDF::URI(env['REQUEST_URI']), repository)]\r\nend\r\n\r\nrun app\r\n```\r\n\r\nAnd run your server with: \r\n\r\n```sh\r\n$ rackup\r\n```\r\n\r\nCompliance\r\n----------\r\n\r\nCurrent compliance reports for Lamprey are located in [/reports](reports/).\r\nReports are generated by the LDP test suite. To duplicate the results,\r\nuse the `testsuite` branch, which contains a work-around for\r\n[w3c/ldp-testsuite#224](https://github.com/w3c/ldp-testsuite/issues/224).\r\n\r\n\r\nLicense\r\n========\r\n\r\nThis software is released under a public domain waiver (Unlicense).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}